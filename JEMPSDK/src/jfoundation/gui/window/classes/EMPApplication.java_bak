package jfoundation.gui.window.classes;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Vector;

import javax.swing.Icon;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSplitPane;
import javax.swing.Timer;

import jfoundation.gui.window.classes.Dlg.EMPAboutDlg;
import jfoundation.gui.window.classes.Dlg.EMPChangePaawordDlg;

import com.core.xml.PackageStub;
import com.core.xml.StubObject;
import com.efounder.comp.menu.EMPMenuTreePanel;
import com.efounder.eai.EAI;
import com.efounder.eai.ide.ExplorerIcons;
import com.efounder.eai.main.EAIActiveComp;
import com.efounder.pfc.window.ComponentFactory;
import com.jidesoft.status.MemoryStatusBarItem;
import com.jidesoft.status.ProgressStatusBarItem;
import com.jidesoft.status.StatusBar;
import com.jidesoft.status.TimeStatusBarItem;
import com.jidesoft.swing.JideBoxLayout;

public class EMPApplication extends EAIActiveComp implements ActionListener{
	private                     JFrame                    frame;	
	private                 JSplitPane               hSplitPane = new JSplitPane();
	private           EMPMenuTreePanel                treePanel;
	private                     String                    title = "";
	private                     JPanel               northPanel = new JPanel();
	private                  StatusBar                statusBar = new StatusBar();
	protected    ProgressStatusBarItem                 progress = null;
	private                 SystemTray                  sysTray;// 当前操作系统的托盘对象
	private                   TrayIcon                 trayIcon;// 当前对象的托盘
	private                      Timer                   _timer;
	
	private                   JMenuBar                 jMenuBar;      

	private                      JMenu                   jMenu1;      

	private                      JMenu                   jMenu2;      

	private                  JMenuItem              jMenuItem11;      

	private                  JMenuItem              jMenuItem12;      

	private                  JMenuItem              jMenuItem21;    
    
	private                     JPanel              pnContainer = new JPanel();
	
	public EMPApplication(String title) {
		this.title = title;
		init();
	}
	
	/**
	 * 初始化窗体
	 */
	private void init() {
		frame = new JFrame(title);
		frame.getContentPane().setBackground(new Color(170, 188, 120));
		frame.addComponentListener(new FrameListener());
		frame.getContentPane().setLayout(new BorderLayout());
		frame.setBounds(100, 100, 800, 600);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		treePanel = new EMPMenuTreePanel();
		hSplitPane.setLeftComponent(treePanel);
		hSplitPane.setRightComponent(desktopPane);
		hSplitPane.setDividerLocation(240);
		hSplitPane.setOneTouchExpandable(true);
		
		frame.getContentPane().add(hSplitPane, BorderLayout.CENTER);
		frame.getContentPane().add(this.northPanel, BorderLayout.SOUTH);
//		northPanel.setPreferredSize(new Dimension(20, 30));//关键代码,设置JPanel的大小 
		northPanel.setLayout(new BorderLayout());
		northPanel.add(this.statusBar, BorderLayout.CENTER);
		
		frame.setExtendedState(JFrame.MAXIMIZED_BOTH );
		
		jMenu1 = new JMenu("系统管理");     
		
		jMenu2 = new JMenu("帮助系统");    
		
		jMenuItem11 = new JMenuItem("更改密码");      

        jMenuItem12 = new JMenuItem("退出");      
        
        jMenuItem21 = new JMenuItem("关于本软件"); 
        
        jMenuItem11.addActionListener(this);
        jMenuItem12.addActionListener(this);
        jMenuItem21.addActionListener(this);
        
        jMenu1.add(jMenuItem11); 
        
        jMenu1.add(jMenuItem12); 
        
        jMenu2.add(jMenuItem21); 
        
        jMenuBar = new JMenuBar();      
        
        jMenuBar.add(jMenu1);   
        
        jMenuBar.add(jMenu2);   
        
        frame.setJMenuBar(jMenuBar);      
        
		frame.setVisible(true);

		frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		
		super.setApplaction(this);
		super.applactionFrame = frame;
		
		initIcon();
		initStatus();
		frame.addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				int flag = JOptionPane.showConfirmDialog(null, "是否退出系统?", "提示", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
				if (JOptionPane.YES_OPTION == flag) {
					System.exit(0);
				} else {
					return;
				}
			}
		});
	}

	/**
	 *
	 */
	public void initStatus() {
		progress = new ProgressStatusBarItem();
		progress.setCancelCallback(new ProgressStatusBarItem.CancelCallback() {
			public void cancelPerformed() {
				_timer.stop();
	            _timer = null;
	            progress.setStatus("Cancelled");
	            progress.showStatus();
			}
		});
		registryComponent(progress, JideBoxLayout.VARY);

		// 初始化扩展状态栏
		initExtStatus("StatusComponentFactory");

//	      ButtonStatusBarItem button = new ButtonStatusBarItem("READ-ONLY");
//	      button.setIcon(JideIconsFactory.getImageIcon(JideIconsFactory.SAVE));
//	      button.setPreferredWidth(20);
//	      statusBar.add(button, JideBoxLayout.FLEXIBLE);
	//
//	      button.addActionListener(new ActionListener() {
//	          public void actionPerformed(ActionEvent e) {
//	              if (_timer != null && _timer.isRunning())
//	                  return;
//	              _timer = new Timer(100, new ActionListener() {
//	                  int i = 0;
	//
//	                  public void actionPerformed(ActionEvent e) {
//	                      if (i == 0)
//	                          progress.setProgressStatus("Initializing ......");
//	                      if (i == 10)
//	                          progress.setProgressStatus("Running ......");
//	                      if (i == 90)
//	                          progress.setProgressStatus("Completing ......");
//	                      progress.setProgress(i++);
//	                      if (i > 100)
//	                          _timer.stop();
//	                  }
//	              });
//	              _timer.start();
//	          }
//	      });
	//
//	      final LabelStatusBarItem label = new LabelStatusBarItem("Line");
//	      label.setText("100:42");
//	      label.setAlignment(JLabel.CENTER);
//	      statusBar.add(label, JideBoxLayout.FLEXIBLE);
	//
//	      final OvrInsStatusBarItem ovr = new OvrInsStatusBarItem();
//	      ovr.setPreferredWidth(100);
//	      ovr.setAlignment(JLabel.CENTER);
//	      statusBar.add(ovr, JideBoxLayout.FLEXIBLE);

		final TimeStatusBarItem time = new TimeStatusBarItem();
		java.text.DateFormat df = java.text.DateFormat.getDateTimeInstance() ;
		time.setTextFormat(df);
		registryComponent(time, JideBoxLayout.FLEXIBLE);
		final MemoryStatusBarItem gc = new MemoryStatusBarItem();
		statusBar.add(gc, JideBoxLayout.FLEXIBLE);
	}
	  
	/**
	 * registryComponent
	 *
	 * @param comp Component
	 * @param Id Object
	 * @return Component
	 * @todo Implement this com.efounder.pfc.window.IWindowStatus method
	 */
	public Component registryComponent(Component comp, Object Id) {
		this.statusBar.add(comp, Id);
	    return comp;
	}

	public Container registryContainer(Container comp) {
		this.pnContainer.add(comp);
		return comp;
	}
	  
	public Container registryContainer(Container comp,Object ID) {
		comp.setName(ID==null?"":ID.toString());
	    registryContainer(comp);
	    return comp;
	}
	
	/**
	 *
	 * @param Type String
	 */
	private void initExtStatus(String Type) {
		StubObject SO = null;
	    Vector statusList = PackageStub.getContentVector(Type);
	    for(int i=0;statusList!=null&&i<statusList.size();i++) {
	      SO = (StubObject)statusList.get(i);
	      initStubObject(SO,Type);
	    }
	}
	  
	private void initStubObject(StubObject SO,String Type) {
		String clazz = SO.getString("clazz",null);
		if ( clazz == null || "".equals(clazz.trim()) ) return;
		String Caption = SO.getString("caption",null);
		try {
			Class clsFactory = Class.forName(clazz);
		    ComponentFactory cf = (ComponentFactory)clsFactory.newInstance();
		    JComponent[] comps = cf.createComponent(this.statusBar);
		    JComponent comp;
		    for(int i=0;i<comps.length;i++) {
		    	comp = comps[i];
//		       comp.setToolTipText(Caption);
		    	if ("StatusComponentFactory".equals(Type))
		    		this.registryComponent(comp,JideBoxLayout.FLEXIBLE);
		    	if ("StatusContainerFactory".equals(Type))
		    		this.registryContainer( (Container) comp,SO.getString("id",""));
		    }
		} catch ( Exception e ) {
		   	e.printStackTrace();
//		   	ErrorManager.getDefault().notify(e);
		}
	}
	  
	private void initIcon() {
		Icon icon = null;
	    icon = ExplorerIcons.getExplorerIcon("FC.gif");
	    if ( icon != null )
	      System.getProperties().put("RES_ICON",icon);
	    icon = ExplorerIcons.getExplorerIcon("FM.gif");
	    if ( icon != null ) System.getProperties().put("MAX_ICON",icon);
	    
	    Toolkit tk = Toolkit.getDefaultToolkit();
		Image i = tk.getImage(this.getClass().getResource("/" + EAI.Product + "/Resource/" + EAI.Product.toUpperCase() + ".png"));
		EAI.getApplactionFrame().setIconImage(i);
	}
	
	// 窗体监听器
	private final class FrameListener extends ComponentAdapter {
		public void componentResized(final ComponentEvent e) {
		}
	}

	public void actionPerformed(ActionEvent e) {
		if(e.getSource() == jMenuItem11) {
			EMPChangePaawordDlg changePasswordDlg = new EMPChangePaawordDlg(EAI.getApplactionFrame(), "修改密码", true);
			changePasswordDlg.Show();
			changePasswordDlg.pack();
		} else if(e.getSource() == jMenuItem12) {
			int flag = JOptionPane.showConfirmDialog(null, "是否退出系统?", "提示", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
			if (JOptionPane.YES_OPTION == flag) {
				System.exit(0);
			} else {
				return;
			}
		} else if(e.getSource() == jMenuItem21) {
			EMPAboutDlg aboutDlg = new EMPAboutDlg(EAI.getApplactionFrame(), "关于...", true);
			aboutDlg.Show();
			aboutDlg.pack();
		}
	}

	public SystemTray getSysTray() {
		return sysTray;
	}

	public void setSysTray(SystemTray sysTray) {
		this.sysTray = sysTray;
	}

	public TrayIcon getTrayIcon() {
		return trayIcon;
	}

	public void setTrayIcon(TrayIcon trayIcon) {
		this.trayIcon = trayIcon;
	}
}

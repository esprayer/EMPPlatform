package com.efounder.pfc.window;

import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.HashMap;
import java.util.Map;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JInternalFrame;
import javax.swing.JPanel;
import javax.swing.JTabbedPane;
import javax.swing.UIManager;

import com.core.xml.StubObject;
import com.efounder.pub.util.EMPStringUtils;
import com.jidesoft.plaf.LookAndFeelFactory;
import com.jidesoft.plaf.office2003.BasicOffice2003Theme;
import com.jidesoft.plaf.office2003.Office2003Painter;
import com.jidesoft.swing.JideTabbedPane;

public class JChildWindow extends JInternalFrame implements MouseListener {
	JideTabbedPane tabbedPane = new JideTabbedPane();  
	// 创建窗体的Map类型集合对象
	private JWindowListener ifs = new JWindowListener();
	
	public JChildWindow() {
		super();
		BasicOffice2003Theme theme = new BasicOffice2003Theme("Custom");
		theme.setBaseColor(new Color(50, 190, 150), true, "default");
		((Office2003Painter) Office2003Painter.getInstance()).addTheme(theme);

		LookAndFeelFactory.installDefaultLookAndFeelAndExtension();
		try {
			UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
			LookAndFeelFactory.installJideExtension(7);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		tabbedPane.setShowIconsOnTab(true);
		tabbedPane.setShowTabArea(true);
		tabbedPane.setUseDefaultShowCloseButtonOnTab(true);
		tabbedPane.setUseDefaultShowIconsOnTab(true);
		tabbedPane.setShowCloseButton(true);
		tabbedPane.setShowCloseButtonOnSelectedTab(true);
		tabbedPane.setShowCloseButtonOnTab(true);
		tabbedPane.addMouseListener(this);
		this.add(tabbedPane);
	}

	public void openWindow(StubObject nodeStub, String title,Icon icon, String tip,Component comp) {
		int        selectTabIndex = ifs.getJWindow(nodeStub, comp);
		tabbedPane.addTab(title, icon, comp);
		tabbedPane.setSelectedIndex(tabbedPane.getTabCount() - 1);
		tabbedPane.setShowTabButtons(false);
//		if(selectTabIndex > -1) {
//			tabbedPane.setSelectedIndex(selectTabIndex);
//		} else {
//			if(nodeStub.getString("tabbedClose", "1").equals("0")) {
//				tabbedPane.addTab(title, new CloseTabIcon(icon), comp);
//				tabbedPane.setSelectedIndex(tabbedPane.getTabCount() - 1);
//			} else {
//				tabbedPane.addTab(title, icon, comp);
//				tabbedPane.setSelectedIndex(tabbedPane.getTabCount() - 1);
//			}
//		}
//		tabbedPane.addTab("Three", icon, comp, "第三个卡片提示信息！");  
	}
	
	/**
	* The class which generates the 'X' icon for the tabs. The constructor
	* accepts an icon which is extra to the 'X' icon, so you can have tabs
	* like in JBuilder. This value is null if no extra icon is required.
	*/
	class CloseTabIcon implements Icon {
	    private int x_pos;
	    private int y_pos;
	    private int width;
	    private int height;
	    private Icon fileIcon;
	    public CloseTabIcon(Icon fileIcon) {
	        this.fileIcon = fileIcon;
	        width = 16;
	        height = 16;
	    }
	    public void paintIcon(Component c, Graphics g, int x, int y) {
	        this.x_pos = x;
	        this.y_pos = y;
	        Color col = g.getColor();
	        g.setColor(Color.black);
	        int y_p = y + 2;
//	        g.drawLine(x + 1, y_p, x + 12, y_p);
//	        g.drawLine(x + 1, y_p + 13, x + 12, y_p + 13);
//	        g.drawLine(x, y_p + 1, x, y_p + 12);
//	        g.drawLine(x + 13, y_p + 1, x + 13, y_p + 12);
	        g.drawLine(x + 3, y_p + 3, x + 10, y_p + 10);
	        g.drawLine(x + 3, y_p + 4, x + 9, y_p + 10);
	        g.drawLine(x + 4, y_p + 3, x + 10, y_p + 9);
	        g.drawLine(x + 10, y_p + 3, x + 3, y_p + 10);
	        g.drawLine(x + 10, y_p + 4, x + 4, y_p + 10);
	        g.drawLine(x + 9, y_p + 3, x + 3, y_p + 9);
	        g.setColor(col);
	        if (fileIcon != null) {
	            fileIcon.paintIcon(c, g, x + width, y_p);
	        }
	    }
	    public int getIconWidth() {
	        return width + (fileIcon != null ? fileIcon.getIconWidth() : 0);
	    }
	    public int getIconHeight() {
	        return height;
	    }
	    public Rectangle getBounds() {
	        return new Rectangle(x_pos, y_pos, width, height);
	    }
	    
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
}
